{"version":3,"sources":["M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail-routing.module.ts","M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.html","M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.scss","M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.ts","M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.module.ts","M:/corporate/corporate/corporate/node_modules/ngx-pagination/dist/ngx-pagination.js"],"names":[],"mappings":"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EAAc;gBACd,4EAAmB;aACpB;YACD,YAAY,EAAE,CAAE,gGAAyB,CAAE;SAC5C,CAAC;OACW,iBAAiB,CAAI;IAAD,wBAAC;CAAA;AAAJ;;;;;;;;;AClC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiK;AAClH;;AAE/C;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,QAAQ,2DAAI;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,g1BAAg1B,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,kEAAkE,6IAA6I,4BAA4B,kCAAkC,kEAAkE,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC9gF,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAY;AAC1C,wCAAwC,2DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,6DAAM;AACd,oCAAoC,2DAAY;AAChD;AACA;AACA,QAAQ,6DAAM;AACd,oCAAoC,2DAAY;AAChD;AACA;AACA,QAAQ,gEAAS;AACjB;AACA;AACA;AACA,6BAA6B,sEAAuB;AACpD,2BAA2B,gEAAiB;AAC5C,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2DAAY;AAC1C,wCAAwC,2DAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA,QAAQ,6DAAM;AACd,oCAAoC,2DAAY;AAChD;AACA;AACA,QAAQ,6DAAM;AACd,oCAAoC,2DAAY;AAChD;AACA;AACA,QAAQ,gEAAS;AACjB;AACA;AACA,SAAS;AACT;AACA,YAAY,gEAAiB;AAC7B;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAQ;AAChB,sBAAsB,6DAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEwK","file":"beading-inbox-mail.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes,\r\n     RouterModule } from '@angular/router';\r\n\r\nimport { BeadingInboxMailComponent } from './beading-inbox-mail.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BeadingInboxMailComponent,\r\n    data: {\r\n      title: 'Inbox'\r\n    }\r\n  }\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class BeadingInboxMainRoutingModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail-routing.module.ts","module.exports = \"<div class=\\\"animated fadeIn\\\">\\r\\n    <div class=\\\"email-app mb-4\\\">\\r\\n        <nav>\\r\\n            <button *ngIf=\\\"loggedInUser.ROLE != '3'\\\" type=\\\"button\\\" routerLink=\\\"/compose-mail\\\" class=\\\"btn btn-primary  btn-block\\\"> Create Project</button>\\r\\n            <ul class=\\\"nav\\\">\\r\\n                <li class=\\\"nav-item\\\" (click)=\\\"openInbox()\\\">\\r\\n                    <a class=\\\"nav-link\\\"><i class=\\\"fa fa-inbox\\\"></i> Inbox <span class=\\\"badge badge-danger\\\">{{unReadCount}}</span></a>\\r\\n                </li>\\r\\n                <li *ngIf=\\\"loggedInUser.ROLE != '3'\\\" class=\\\"nav-item\\\" (click)=\\\"getSentEmails()\\\">\\r\\n                    <a class=\\\"nav-link\\\"><i class=\\\"fa fa-rocket\\\"></i> Sent</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </nav>\\r\\n        <main class=\\\"inbox\\\" *ngIf=\\\"inbox\\\">\\r\\n            <div class=\\\"toolbar\\\">\\r\\n                <div class=\\\"row\\\">                    \\r\\n                    <!-- <div class=\\\"col-md-6\\\">\\r\\n                        <div class=\\\"btn-group\\\">\\r\\n                            <button type=\\\"button\\\" routerLink=\\\"/compose-mail\\\" class=\\\"btn btn-primary\\\"> Create Project</button>\\r\\n                        </div>\\r\\n                    </div> -->\\r\\n                    <div class=\\\"col-md-12 text-right\\\">\\r\\n                        <pagination-controls (pageChange)=\\\"p = $event\\\"></pagination-controls>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <ul class=\\\"messages\\\">\\r\\n                <li class=\\\"message\\\" [ngClass]=\\\"email.ISREAD == false? 'unread' : 'read'\\\" (click)=\\\"viewBead(email, true)\\\" *ngFor=\\\"let email of emails | paginate: { itemsPerPage: 5, currentPage: p } \\\">\\r\\n                    <a>\\r\\n                        <div class=\\\"actions\\\">\\r\\n                            <span class=\\\"action\\\"><i class=\\\"fa fa-star-o\\\"></i></span>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"header\\\">\\r\\n                            <span class=\\\"from\\\" *ngIf=\\\"loggedInUser.EMAIL === email.FROM\\\">Me</span>\\r\\n                            <span class=\\\"from\\\" *ngIf=\\\"loggedInUser.EMAIL != email.FROM\\\">{{email.FROM}}</span>\\r\\n                            <h3 class=\\\"badge badge-pill badge-danger\\\" *ngIf=\\\"email.ISREAD == false\\\">New</h3>\\r\\n                            <span class=\\\"date\\\"><span class=\\\"fa fa-paper-clip\\\"></span> {{email.CREATED_DATE | date: 'medium'}}</span>\\r\\n                            <h3 class=\\\"badge badge-pill badge-success\\\" *ngIf=\\\"email.ISACCEPTED === true\\\">Accepted</h3>\\r\\n                        </div>\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{email.SUBJECT}}\\r\\n                        </div>\\r\\n                        <div class=\\\"description hidechar\\\">\\r\\n                            <!-- {{email.MESSAGE}} -->\\r\\n                            <div [innerHTML]=\\\"email.MESSAGE\\\"></div>\\r\\n                        </div>\\r\\n                    </a>\\r\\n                </li>\\r\\n\\r\\n            </ul>\\r\\n        </main>\\r\\n        <main class=\\\"inbox\\\" *ngIf=\\\"sent\\\">\\r\\n            <div class=\\\"toolbar\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <!-- <div class=\\\"col-md-6\\\">\\r\\n                        <div class=\\\"btn-group\\\">\\r\\n                            <button type=\\\"button\\\" routerLink=\\\"/compose-mail\\\" class=\\\"btn btn-primary\\\"> Create Project</button>\\r\\n                        </div>\\r\\n                    </div> -->\\r\\n                    <div class=\\\"col-md-12 text-right\\\">\\r\\n                        <pagination-controls (pageChange)=\\\"p = $event\\\"></pagination-controls>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <ul class=\\\"messages\\\">\\r\\n                <li class=\\\"message\\\" (click)=\\\"viewBead(email, false)\\\" *ngFor=\\\"let email of sentEmails | paginate: { itemsPerPage: 5, currentPage: p } \\\">\\r\\n                    <a>\\r\\n                        <div class=\\\"actions\\\">\\r\\n                            <!-- <span class=\\\"action\\\"><i class=\\\"fa fa-square-o\\\"></i></span> -->\\r\\n                            <input type=\\\"checkbox\\\" class=\\\"action\\\" />\\r\\n                            <span class=\\\"action\\\"><i class=\\\"fa fa-star-o\\\"></i></span>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"header\\\">\\r\\n                            <span class=\\\"from\\\" *ngIf=\\\"loggedInUser.EMAIL === email.TO\\\">Me</span>\\r\\n                            <span class=\\\"from\\\" *ngIf=\\\"loggedInUser.EMAIL != email.TO\\\">{{email.TO}}</span>\\r\\n                            <!-- <h3 class=\\\"badge badge-pill badge-danger\\\" *ngIf=\\\"email.ISREAD == false\\\">New</h3> -->\\r\\n                            <span class=\\\"date\\\"><span class=\\\"fa fa-paper-clip\\\"></span> {{email.CREATED_DATE | date: 'medium'}}</span>\\r\\n                        </div>\\r\\n                        <div class=\\\"title\\\">\\r\\n                            {{email.SUBJECT}}\\r\\n                        </div>\\r\\n                        <div class=\\\"description hidechar\\\">\\r\\n                            <!-- {{email.MESSAGE}} -->\\r\\n                            <div [innerHTML]=\\\"email.MESSAGE\\\"></div>\\r\\n                        </div>\\r\\n                    </a>\\r\\n                </li>\\r\\n\\r\\n            </ul>\\r\\n        </main>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<!-- <div bsModal #largeModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: 'static',keyboard: 'false'}\\\">\\r\\n  <div class=\\\"modal-dialog modal-lg\\\" role=\\\"document\\\" style=\\\"max-width: 1000px;\\\">\\r\\n      <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n              <h4 class=\\\"modal-title\\\">Compose</h4>\\r\\n              <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"largeModal.hide()\\\" aria-label=\\\"Close\\\">\\r\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n      </button>\\r\\n          </div>\\r\\n          <div class=\\\"modal-body\\\">\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-2\\\">\\r\\n                      <label>From :</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-md-6\\\">\\r\\n                      <input type=\\\"text\\\" class=\\\"form-group form-control\\\" />\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-2\\\">\\r\\n                      <label>To :</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-md-6\\\">\\r\\n                      <fieldset class=\\\"form-group\\\">\\r\\n                          <ng-select [items]=\\\"events\\\" bindLabel=\\\"label\\\" bindValue=\\\"value\\\" placeholder=\\\"Select Events\\\"></ng-select>\\r\\n                      </fieldset>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-2\\\">\\r\\n                      <label>Subject :</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-md-6\\\">\\r\\n                      <input type=\\\"text\\\" class=\\\"form-group form-control\\\" />\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-2\\\">\\r\\n                      <label>Message :</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-md-6\\\">\\r\\n                      <textarea placeholder=\\\"Message\\\" class=\\\"form-group form-control\\\" rows=\\\"10\\\"></textarea>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-2\\\">\\r\\n                      <label>Attachment :</label>\\r\\n                  </div>\\r\\n                  <div class=\\\"col-md-6\\\">\\r\\n                      <input type=\\\"file\\\" class=\\\"form-group\\\" multiple (change)=\\\"getFileDetails($event)\\\" />\\r\\n                      <p class=\\\"note\\\">Note: Upload file upto 25MB.</p>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-md-12 form-group\\\">\\r\\n                      <button class=\\\"btn btn-primary\\\" style=\\\"float: right;\\\" type=\\\"button\\\">Send</button>\\r\\n                  </div>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div> -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.html\n// module id = ../../../../../src/app/views/beading-inbox-mail/beading-inbox-mail.component.html\n// module chunks = beading-inbox-mail.module","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".read {\\n  background-color: #d8d8d8; }\\n\\n.read:hover {\\n  background-color: #d8d8d8 !important; }\\n\\n.unread {\\n  background-color: #fff; }\\n\\n.hidechar {\\n  overflow: hidden;\\n  display: -webkit-box;\\n  -webkit-line-clamp: 3;\\n  -webkit-box-orient: vertical;\\n  max-width: 100ch;\\n  text-overflow: ellipsis; }\\n\\n.ml15 {\\n  margin-left: 15px; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.scss\n// module id = ../../../../../src/app/views/beading-inbox-mail/beading-inbox-mail.component.scss\n// module chunks = beading-inbox-mail.module","import { Component, OnInit, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { Route } from '@angular/compiler/src/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from 'app/services';\r\nimport { Subscription, Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-beading-inbox-mail',\r\n  templateUrl: './beading-inbox-mail.component.html',\r\n  styleUrls: ['./beading-inbox-mail.component.scss','../../../scss/vendors/toastr/toastr.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BeadingInboxMailComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(public route: Router, private _user_service: UserService) {\r\n   \r\n   }\r\n\r\n  private subscription: Subscription = new Subscription();\r\n  loading: any;\r\n  emails: any = [];\r\n  sentEmails:any = [];\r\n  interval: any;\r\n  loggedInUser:any = {};\r\n  inbox:any = true;\r\n  sent:any = false;\r\n  deleteEmails :any = [];\r\n\r\n  unReadCount:any = 0;\r\n\r\n  UnreadEmailCounter = 0;\r\n  ngOnInit() {\r\n    this.loggedInUser = JSON.parse(localStorage.getItem(\"user\"));\r\n    this.getEmails();\r\n    this.getUnReadEmails();\r\n    // for (let i = 0; i < this.emails.length; i++) {\r\n    //   this.emails.push(`item ${i}`);\r\n    // }\r\n    \r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  getEmails() {\r\n    this.subscription.add(\r\n      this._user_service.getEmails()\r\n        .subscribe(\r\n          data => {\r\n            this.emails = data.data;\r\n            this.subscribeToData();\r\n          })\r\n    );\r\n  }\r\n\r\n  getUnReadEmails() {\r\n    this.subscription.add(\r\n      this._user_service.getUnReadEmails()\r\n        .subscribe(\r\n          data => {\r\n            // this.emails = data.data;\r\n            this.unReadCount = data.data.length;\r\n            this.subscribeUnReadEmailData();\r\n          })\r\n    );\r\n  }\r\n\r\n  getSentEmails(){\r\n    this.inbox = false;\r\n    this.sent = true;\r\n    this._user_service.getSentEmails()\r\n        .subscribe(\r\n          data => {\r\n            this.sentEmails = data.data;\r\n            // this.subscribeToData();\r\n          });\r\n  }\r\n\r\n  openInbox(){\r\n    this.inbox = true;\r\n    this.sent = false;\r\n  }\r\n\r\n  subscribeToData() {\r\n    this.subscription.add(\r\n      Observable.timer(10000).subscribe(() => this.getEmails())\r\n    );\r\n  }\r\n\r\n  subscribeUnReadEmailData() {\r\n    this.subscription.add(\r\n      Observable.timer(10000).subscribe(() => this.getUnReadEmails())\r\n    );\r\n  }\r\n\r\n  viewBead(email, status) {\r\n    if(!email.ISREAD){\r\n      this.statusChange(email);\r\n    }   \r\n    this.route.navigate(['/view-bead' , {id : email._id} ]);\r\n  }\r\n  \r\n  statusChange(email) {\r\n    var data = {\r\n      _id:email._id\r\n    }\r\n    this._user_service.emailReadStatus(data)\r\n      .subscribe(\r\n        data => {\r\n          \r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.component.ts","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ChartsModule } from 'ng2-charts/ng2-charts';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\r\nimport { BeadingInboxMailComponent } from './beading-inbox-mail.component';\r\nimport { BeadingInboxMainRoutingModule } from './beading-inbox-mail-routing.module';\r\nimport { AceEditorModule } from 'ng2-ace-editor';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DataTableModule } from 'angular2-datatable';\r\nimport { ModalModule, TooltipModule } from 'ngx-bootstrap';\r\nimport { ToasterModule } from 'angular2-toaster';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { ViewBeadComponent } from './view-bead/view-bead.component';\r\nimport {NgxPaginationModule} from 'ngx-pagination';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    BeadingInboxMainRoutingModule,\r\n    ChartsModule,\r\n    BsDropdownModule,\r\n    ButtonsModule.forRoot(),\r\n    AceEditorModule,\r\n    CommonModule,\r\n    DataTableModule,\r\n    ModalModule.forRoot(),\r\n    ToasterModule,\r\n    TooltipModule.forRoot(),\r\n    NgSelectModule,\r\n    NgxPaginationModule\r\n  ],\r\n  declarations: [ BeadingInboxMailComponent ]\r\n})\r\nexport class BeadingMailModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// M:/corporate/corporate/corporate/src/app/views/beading-inbox-mail/beading-inbox-mail.module.ts","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = /** @class */ (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        }\r\n        else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = /** @class */ (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        var emitChange = this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n            return collection;\r\n        }\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, config) {\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe = __decorate$1([\r\n        Pipe({\r\n            name: 'paginate',\r\n            pure: false\r\n        }),\r\n        __metadata(\"design:paramtypes\", [PaginationService])\r\n    ], PaginatePipe);\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\"\\n                         (pageBoundsCorrection)=\\\"pageBoundsCorrection.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nvar __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = /** @class */ (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"id\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Number)\r\n    ], PaginationControlsComponent.prototype, \"maxSize\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"directionLinks\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"autoHide\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", Boolean),\r\n        __metadata$1(\"design:paramtypes\", [Boolean])\r\n    ], PaginationControlsComponent.prototype, \"responsive\", null);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"previousLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"nextLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPaginationLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderPageLabel\", void 0);\r\n    __decorate$2([\r\n        Input(),\r\n        __metadata$1(\"design:type\", String)\r\n    ], PaginationControlsComponent.prototype, \"screenReaderCurrentLabel\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageChange\", void 0);\r\n    __decorate$2([\r\n        Output(),\r\n        __metadata$1(\"design:type\", EventEmitter)\r\n    ], PaginationControlsComponent.prototype, \"pageBoundsCorrection\", void 0);\r\n    PaginationControlsComponent = __decorate$2([\r\n        Component({\r\n            selector: 'pagination-controls',\r\n            template: DEFAULT_TEMPLATE,\r\n            styles: [DEFAULT_STYLES],\r\n            changeDetection: ChangeDetectionStrategy.OnPush,\r\n            encapsulation: ViewEncapsulation.None\r\n        })\r\n    ], PaginationControlsComponent);\r\n    return PaginationControlsComponent;\r\n}());\n\nvar __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = /** @class */ (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pageBoundsCorrection = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", String)\r\n    ], PaginationControlsDirective.prototype, \"id\", void 0);\r\n    __decorate$3([\r\n        Input(),\r\n        __metadata$2(\"design:type\", Number)\r\n    ], PaginationControlsDirective.prototype, \"maxSize\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageChange\", void 0);\r\n    __decorate$3([\r\n        Output(),\r\n        __metadata$2(\"design:type\", EventEmitter)\r\n    ], PaginationControlsDirective.prototype, \"pageBoundsCorrection\", void 0);\r\n    PaginationControlsDirective = __decorate$3([\r\n        Directive({\r\n            selector: 'pagination-template,[pagination-template]',\r\n            exportAs: 'paginationApi'\r\n        }),\r\n        __metadata$2(\"design:paramtypes\", [PaginationService,\r\n            ChangeDetectorRef])\r\n    ], PaginationControlsDirective);\r\n    return PaginationControlsDirective;\r\n}());\n\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar NgxPaginationModule = /** @class */ (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule = __decorate([\r\n        NgModule({\r\n            imports: [CommonModule],\r\n            declarations: [\r\n                PaginatePipe,\r\n                PaginationControlsComponent,\r\n                PaginationControlsDirective\r\n            ],\r\n            providers: [PaginationService],\r\n            exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n        })\r\n    ], NgxPaginationModule);\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// M:/corporate/corporate/corporate/node_modules/ngx-pagination/dist/ngx-pagination.js\n// module id = ../../../../ngx-pagination/dist/ngx-pagination.js\n// module chunks = beading-inbox-mail.module"],"sourceRoot":"webpack:///"}